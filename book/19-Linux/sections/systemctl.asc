==== Systemctl

==== `systemctl` 参数
list-units:: 列出 systemd 当前已加载到内存中的单元

list-timers:: 列出当前已加载到内存中的定时器(timer)单元，并按照下次执行的时间点排序

is-active:: 检查指定的单元中， 是否有处于活动(active)状态的单元

cat:: 显示指定单元的单元文件内容

list-dependencies:: 显示单元的依赖关系

enable:: 设为"开机时自动启动"或"插入某个硬件时自动启动"

disable:: 撤销这些单元的"开机时自动启动"以及"插入某个硬件时自动启动"

mask:: 屏蔽指定的单元或单元实例(禁用)

unmask:: 解除对指定单元或单元实例的屏蔽，这是 mask 命令的反动作

edit:: 调用文本编辑器(参见下面的"环境变量"小节) 修改 指定的单元或单元实例。

list-jobs:: 列出正在运行中的任务。

daemon-reload:: 重新加载 systemd 守护进程的配置


====  配置 `.service`

Description=:: 有利于人类阅读的、对单元进行简单描述的字符串

Documentation=:: 一组用空格分隔的文档URI列表， 这些文档是对此单元的详细说明

Before=a:: 此服务在a服务之前启动

After=a:: 此服务在a服务之后启动

==== 配置 `.timer`

.service.timer
[source,text]
----
[Unit] # 定义元数据
[Timer] #定义定时器
OnActiveSec：定时器生效后，多少时间开始执行任务
OnBootSec：系统启动后，多少时间开始执行任务
OnStartupSec：Systemd 进程启动后，多少时间开始执行任务
OnUnitActiveSec：该单元上次执行后，等多少时间再次执行
OnUnitInactiveSec： 定时器上次关闭后多少时间，再次执行
OnCalendar：基于绝对时间，而不是相对时间执行,用于和 crond 类似的定时任务 ,以实际时间执行。
AccuracySec：如果因为各种原因，任务必须推迟执行，推迟的最大秒数，默认是60秒
Unit：真正要执行的任务，默认是同名的带有.service后缀的单元
Persistent：如果设置了该字段，即使定时器到时没有启动，也会自动执行相应的单元
WakeSystem：如果系统休眠，是否自动唤醒系统
----

.时间后缀
[source,text]
----
systemd 在解析时长字符串(用于赋值)的时候， 接受与时长的显示类似的语法，不同之处在于可以省略空格。 可以理解的时间单位如下：

usec, us, µs

(微秒)
msec, ms

(毫秒)
seconds, second, sec, s

(秒)
minutes, minute, min, m

(分钟)
hours, hour, hr, h

(小时)
days, day, d

(天)
weeks, week, w

(星期)
months, month, M

(月)[=30.44天]
years, year, y

(年)[=365.25天]

----



