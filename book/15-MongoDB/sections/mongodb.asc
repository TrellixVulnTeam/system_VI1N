=== MongoDB


==== 安装

官方安装文档::
https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/[Install MongoDB Community Edition on Red Hat or CentOS]

==== 安装

[source, bash]
----
cat > /etc/yum.repos.d/mongodb-org-4.2.repo << EOF
[mongodb-org-4.2]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/\$releasever/mongodb-org/4.2/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc
EOF

yum install -y mongodb-org
----

===== 文件目录结构

配置文件:: /etc/mongod.conf （YML格式）

.配置文件说明
.. `storage.dbPath`： 指定数据目录，默认 `/var/lib/mongo`
.. `systemLog.path`： 指定日志目录，默认 `/var/log/mongodb`
.. `net.port`： 指定监听端口，默认 `27017`
.. `net.bindIp`： 指定监听IP，默认 `127.0.0.1`

[NOTE]
默认情况下，只有 `mongod` 用户有数据目录和日志目录的读写权限。

==== 配置

===== 禁用SELINUX（重启生效）

<<禁用SELINUX（重启生效）>>

===== 最大文件句柄

<<最大文件句柄>>

===== 其它优化

[source, bash]
echo 'never' > /sys/kernel/mm/transparent_hugepage/enabled

这个设置需要每次开机时设置，需要自行处理。比如，可以修改Grub启动参数：

[source, bash]
----
sed -i 's#GRUB_CMDLINE_LINUX="crashkernel=auto rhgb quiet"#GRUB_CMDLINE_LINUX="crashkernel=auto rhgb quiet transparent_hugepage=never"#' /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg
----

TIP: 修改Grub后，需要重启才能生效。如果不想重启，临时用 `echo` 设置。

测试：

[source, console]
----
# cat /sys/kernel/mm/transparent_hugepage/enabled
always madvise [never]
----

===== 基础配置

[source, bash]
----
mkdir -p /data/mongo
chown -R mongod:mongod /data/mongo
sed -i 's#dbPath: /var/lib/mongo#dbPath: /data/mongo#g' /etc/mongod.conf
----

===== 启用权限验证

[source, bash]
----
echo 'security:' >> /etc/mongod.conf
echo '  authorization: enabled' >> /etc/mongod.conf
----

===== 开机启动

[source, bash]
systemctl enable mongod

===== 启动服务

[source, bash]
systemctl start mongod

===== 验证服务

.查看端口
[source, bash]
ss -antpl|grep 27017

.查看启动日志
[source, bash]
----
# grep 'waiting for connections' /var/log/mongodb/mongod.log
2019-10-24T20:41:22.920+0800 I  NETWORK  [initandlisten] waiting for connections on port 27017
----

==== 创建用户

===== 创建root帐号

进入控制台：

[source, console]
----
# mongo
MongoDB shell version v4.2.8
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("62e222b7-8022-443c-b355-53d1a0dcdea0") }
MongoDB server version: 4.2.8
> 
----

切换到 admin 数据库：

[source, bash]
> use admin

[source, text]
----
> db.createUser(
  {
    user: "root",
    pwd: "4MIJ6Axurmc9ns0Pt0Pr",
    roles: [ "root"]
  }
)
----

[TIP]
====
切换到 admin 数据库，然后可以用 `db.dropUser("root")` 命令删除用户。
====

===== 创建普通用户

用刚才设置的root密码登录：

[source, console]
----
# mongo -uroot -pmongodb_password_root
MongoDB shell version v4.2.8
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("a7541379-f92f-4d68-9060-36d2f9e7839b") }
MongoDB server version: 4.2.8
---
Enable MongoDB's free cloud-based monitoring service, which will then receive and display
metrics about your deployment (disk utilization, CPU, operation statistics, etc).

The monitoring data will be available on a MongoDB website with a unique URL accessible to you
and anyone you share the URL with. MongoDB may use this information to make product
improvements and to suggest MongoDB products and deployment options to you.

To enable free monitoring, run the following command: db.enableFreeMonitoring()
To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---

> db
test
----


==== 基本操作

.创建数据库
----
use database_name
----


.删除数据库
----
db.dropDatabase()
----

.创建集合
----
db.createCollection("users")
----

.删除集合
----
db.user.drop()
----

.插入文档
----
db.users.insert({name:'zhangsan',age:18})` +
db.users.save({name:'lisisi',age:16})
----

[NOTE]
insert和save方法都可以插入数据，当默认的“_id”值已存在时，调用insert方法插入会报错；而save方法不会,会更新相同的_id所在行数据的信息。


.删除文档
----
db.users.remove({'name':'zhangsan'})` +
----
db.collection.drop()
----

.修改文档
[source,bash]
----
db.users.update({'name':'zhangsan'},{$set:{'name':'wanger'}})

#修改多条相同的文档，需要设置 multi 参数为 true
db.collection_name.update({"字段名":"字段值"},{$set:{"要修改的字段名":"修改后的字段值"}},{multi:true})
----

.查询文档
----
db.collection.find(query, projection)
----

.易读方式
----
db.collection.find(query, projection).pretty()
----

==== 条件查询
等于 ::	db.col.find({"by":"root"}).pretty()	
lt 小于 :: db.col.find({"likes":{$lt:50}}).pretty()	
lte 小于或等于 :: db.col.find({"likes":{$lte:50}}).pretty()	
gt 大于 ::	db.col.find({"likes":{$gt:50}}).pretty()	
gte 大于或等于 :: db.col.find({"likes":{$gte:50}}).pretty()	
ne 不等于 :: db.col.find({"likes":{$ne:50}}).pretty()
and :: db.col.find({key1:value1, key2:value2}).pretty()
or :: db.col.find({$or: [{key1: value1}, {key2:value2}]}).pretty()

.Limit
----
db.col.find().limit(NUMBER)
----

.skip 跳过数据读取
----
db.col.find({},{"title":1,_id:0}).limit(1).skip(1)
----

.排序
1：升序，-1：降序 +
----
db.col.find().sort({KEY:1})
----

.索引
----
db.col.createIndex({"title":1})
----

查看集合索引 :: db.col.getIndexes()
查看集合索引大小 :: db.col.totalIndexSize()
删除集合所有索引 :: db.col.dropIndexes()
删除集合指定索引 :: db.col.dropIndex("索引名称")

.聚合
----
db.col.aggregate([{$group : {_id : "$by_user", num : {$sum : 1}}}])
----

$sum :: 计算总和，{$sum: 1}表示返回总和×1的值(即总和的数量),使用{$sum: '$制定字段'}也能直接获取制定字段的值的总和

$avg :: 求平均值

$min :: 求min值

$max :: 求max值

$push :: 将结果文档中插入值到一个数组中

$first :: 根据文档的排序获取第一个文档数据

$last ::  获取最后一个数据


