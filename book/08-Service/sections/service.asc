=== systemd

==== `.service` 文件
[NOTE]
====
在 `/usr/lib/systemd/system` 目录下创建服务配置 `backdump.service` 文件  
====

.编辑 `backdump.service` 文件
[source,txt]
----
[Unit]
Description=mysql dump

[Service]
Type=oneshot
ExecStart=/usr/lib/locale/mysqldump.sh
IOSchedulingClass=idle

[Install]
WantedBy=multi-user.target
----

.编辑 `mysqldump.sh` 文件
[source,bash]
----
#!/bin/bash
/usr/bin/mysqldump -uroot -p'geek' --add-drop-table dedecms_foo_com > dedecms_foo_com`date +%Y%m%d%H%M%S`.sql|tar -zcvf /data/db/dedecms_foo_com`date +%Y%m%d%H%M%S`.sql.tar.gz dedecms_foo_com`date +%Y%m%d%H%M%S`.sql
rsync -a --log-file=/tmp/rsync.log /data/web/ root@192.168.2.8:/data/backup/web
rsync -a --log-file=/tmp/rsync.log /data/db/ root@192.168.2.8:/data/backup/db
----

.参数解释
`[Unit]` :: 通常是配置文件的第一个区块，用来定义 Unit 的元数据
`Description` :: 关于服务的简短描述
`[Service]` :: `service` 的配置区块，编写配置
`Type` :: 定义进程启动时的行为，`oneshot` 一次性进程，参数如下
[source,txt]
----
Type=simple：默认值，执行ExecStart指定的命令，启动主进程
Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出
Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行
Type=dbus：当前服务通过D-Bus启动
Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行
Type=idle：若有其他任务执行完毕，当前服务才会运行
----

`ExecStart` :: 启动当前服务的命令，加命令的绝对路径
`[Install]` :: 配置文件的最后一个区块，用来定义如何启动，以及是否开机启动
`WantedBy` :: 表示该服务所在的 Target，`WantedBy=multi-user.target` 指的是，sshd 所在的 Target 是multi-user.target


==== `.timer` 定时器文件

在 `/usr/lib/systemd/system` 目录下创建服务配置 `.timer` 文件  
`mkdir /usr/lib/systemd/system/backdump.timer` 

.编辑 `backdump.timer` 文件
[source,bash]
----
[Unit]
Description=mysql dump

[Timer]
OnCalendar=hourly

[Install]
WantedBy=timers.target
----

.参数解释
`[Unit]` :: 通常是配置文件的第一个区块，用来定义 Unit 的元数据
`Description` :: 关于服务的简短描述
`[Service]` :: `service` 的配置区块，编写配置
`OnCalendar` :: 定义基于挂钟时间(wallclock)的日历定时器，值是一个日历事件表达式，指定时间触发
[source,test]
----
    minutely → *-*-* *:*:00
      hourly → *-*-* *:00:00
       daily → *-*-* 00:00:00
     monthly → *-*-01 00:00:00
      weekly → Mon *-*-* 00:00:00
      yearly → *-01-01 00:00:00
   quarterly → *-01,04,07,10-01 00:00:00
semiannually → *-01,07-01 00:00:00

相关的服务，参数如下
[Timer]部分定制定时器。Systemd 提供以下一些字段。

OnActiveSec：定时器生效后，多少时间开始执行任务
OnBootSec：系统启动后，多少时间开始执行任务
OnStartupSec：Systemd 进程启动后，多少时间开始执行任务
OnUnitActiveSec：该单元上次执行后，等多少时间再次执行
OnUnitInactiveSec： 定时器上次关闭后多少时间，再次执行
OnCalendar：基于绝对时间，而不是相对时间执行
AccuracySec：如果因为各种原因，任务必须推迟执行，推迟的最大秒数，默认是60秒
Unit：真正要执行的任务，默认是同名的带有.service后缀的单元
Persistent：如果设置了该字段，即使定时器到时没有启动，也会自动执行相应的单元
WakeSystem：如果系统休眠，是否自动唤醒系统
----
`WantedBy` :: 表示该服务所在的 Target，`WantedBy=timers.target` 指的是，sshd 所在的 Target 是timers.target

==== 启动 `service` 

.启动  `backdump.service`
`systemctl start backdump`

.查看服务状态
`systemctl status backdump`

.增加开机自启
`systemctl enable backdump`

.修改服务文件后重载服务
`systemctl daemon-reload`


==== 启动 `timer` 服务
.启动 `backdump.timer`
`systemctl start backdump.timer`

.查看所有已启用的定时器
`systemctl list-timers`

.增加开机自启
`systemctl enable backdump.timer`

.重启 `backdump.timer`
`systemctl restart backdump.timer`

