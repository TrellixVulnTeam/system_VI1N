=== Elasticsearch

==== 基础使用

.ELK安装包下载
[source,bash]
----
https://artifacts.elastic.co/downloads/kibana/kibana-7.8.0-x86_64.rpm

https://artifacts.elastic.co/downloads/elasticsearch/kibana-7.8.0-x86_64.rpm

https://artifacts.elastic.co/downloads/logstash/logstash-7.8.0-x86_64.rpm
----

.测试
[source,bash]
----
curl 'http://localhost:9200/?pretty'
----

.健康检查
[source,bash]
----
[root@elk1 ~]# curl 'localhost:9200/_cluster/health?pretty'
{
  "cluster_name" : "master-node",
  "status" : "green",
  "timed_out" : false,
  "number_of_nodes" : 3,
  "number_of_data_nodes" : 2,
  "active_primary_shards" : 26,
  "active_shards" : 52,
  "relocating_shards" : 0,
  "initializing_shards" : 0,
  "unassigned_shards" : 0,
  "delayed_unassigned_shards" : 0,
  "number_of_pending_tasks" : 0,
  "number_of_in_flight_fetch" : 0,
  "task_max_waiting_in_queue_millis" : 0,
  "active_shards_percent_as_number" : 100.0
}
----

.查看详细信息
----
curl 'localhost:9200/_cluster/state?pretty'
[source,bash]
----

.检索文档是否存在
----
curl -i -XHEAD http://localhost:9200/test/test1/123
[source,bash]
----


.空查询
[source,text]
----
[root@elk1 ~]# curl GET 'localhost:9200/_search?pretty'
curl: (6) Could not resolve host: GET; Unknown error
{
  "took" : 9,           #请求花费的毫秒数
  "timed_out" : false,
  "_shards" : {         #参与查询的分片数（ total 字段），多少成功，多少失败
    "total" : 26,
    "successful" : 26,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : 58145,    # 文档总数
    "max_score" : 1.0,
    "hits" : [
        ...
----

.在所有索引的所有类型中搜索
----
curl GET 'localhost:9200/_search
----

.在索引 gb 的所有类型中搜索
----
curl GET 'localhost:9200/gb/_search
----

.在索引 gb 和 us 的所有类型中搜索
----
curl GET 'localhost:9200/gb,us/_search
----

.在以 g 或 u 开头的索引的所有类型中搜索
----
curl GET 'localhost:9200/g*,u*/_search
----

.在索引 gb 的类型 user 中搜索
----
curl GET 'localhost:9200/gb/user/_search
----

.在索引 gb 和 us 的类型为 user 和 tweet 中搜索
----
curl GET 'localhost:9200/gb,us/user,tweet/_search
----


.分页，每页显示5个结果，页码从1到3
[source,bash]
----

curl GET 'localhost:9200/_search?size=5'
curl GET 'localhost:9200/_search?size=5&from=5'
curl GET 'localhost:9200/_search?size=5&from=10'

----

==== 请求体查询

.字符串查询
[source,bash]
----
curl GET 'localhost:9200/index_2014*/type1,type2/_search
{}'
----

.Post请求
[source,bash]
----
curl POST 'localhost:9200/_search
{
"from": 30,
"size": 10
}'
----


==== 结构化查询

.传递 query 参数进行查询
[source,bash]
----
GET /_search
{
"query": YOUR_QUERY_HERE
}
----

.空查询
[source,bash]
----
GET /_search
{
"query": {
"match_all": {}
}
}
----

.查询子句
[source,bash]
----
GET /_search
{
"query": {
"match": {
"tweet": "elasticsearch"
}
}
}
----

==== 查询与过滤


.term 过滤,主要用于精确匹配哪些值
[source,text]
----
{ "term": { "age": 26 }}
{ "term": { "date": "2014-09-01" }}
{ "term": { "public": true }}
{ "term": { "tag": "full_text" }}

#terms 允许指定多个匹配条件
{
"terms": {
"tag": [ "search", "full_text", "nosql" ]
}
}
----

.range 按照指定范围查找数据
[source,bash]
----
{
"range": {
"age": {
"gte": 20,
"lt": 30
}
}
}
----

.范围操作符包含：
gt :: 大于
gte :: 大于等于
lt :: 小于
lte :: 小于等于

.exists 和 missing
查找文档中是否包含指定字段或没有某个字段
[source,text]
----
{
"exists": {
"field": "title"
}
}
----

.bool 过滤
bool 过滤可以用来合并多个过滤条件查询结果的布尔逻辑，它包含以下操作符：

must :: 多个查询条件的完全匹配,相当于 and 。
must_not :: 多个查询条件的相反匹配，相当于 not 。
should :: 至少有一个查询条件匹配, 相当于 or 。
这些参数可以分别继承一个过滤条件或者一个过滤条件的数组：


==== es集群搭建

.IP准备
192.168.102.1 +
192.168.102.2 +
192.168.102.3



[NOTE]
ES下载地址：https://elasticsearch.cn/download/

.安装JAVA11设置JAVA版本
----
dnf install -y java-11-openjdk java-11-openjdk-devel java-11-openjdk-headless
alternatives --config java
----

.ESelasticserch7.8.0 下载 安装
----
#三台服务器都执行
mkdir -p ~/download/
cd download
wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.0-x86_64.rpm
yum localinstall -y elasticsearch-7.8.0-x86_64.rpm
----

.修改配置
----
# ======================== Elasticsearch Configuration =========================
# ---------------------------------- Cluster -----------------------------------
cluster.name: es-master
# ------------------------------------ Node ------------------------------------
node.name: node-1
node.data: true
node.master: true
#node.attr.rack: r1
# ----------------------------------- Paths ------------------------------------
path.data: /var/lib/elasticsearch
path.logs: /var/log/elasticsearch
# ----------------------------------- Memory -----------------------------------
#bootstrap.memory_lock: true
# ---------------------------------- Network -----------------------------------
network.host: 192.168.102.1
#http.port: 9200
# --------------------------------- Discovery ----------------------------------
discovery.seed_hosts: ["192.168.102.1", "192.168.102.2", "192.168.102.3"]
cluster.initial_master_nodes: ["node-1", "node-2", "node-3"]
# ---------------------------------- Gateway -----------------------------------
#gateway.recover_after_nodes: 3
xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate
xpack.security.transport.ssl.keystore.path: elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: elastic-certificates.p12
----

另外两个节点同样的配置，只需要将network.host:和node.name:修改为自己的，暂不启动

.ES集群xpack配置
https://www.elastic.co/guide/en/elasticsearch/reference/master/configuring-tls.html[官方文档]


.为ES集群创建节点认证中心
----
/usr/share/elasticsearch/bin/elasticsearch-certutil ca
#可以设置一个密码，也可以直接回车。
#默认文件会在 ES 根目录产生，名为 elastic-stack-ca.p12。
#然后可以将文件 elastic-stack-ca.p12 复制到每个 ES 节点的根目录下
----

.为集群中的节点创建证书和私钥（每个节点执行）
----
/usr/share/elasticsearch/bin/elasticsearch-certutil cert --ca ./elastic-stack-ca.p12
#可以设置一个密码，也可以直接回车。
#默认会生成文件 elastic-certificates.p12
----

.elastic-certificates.p12 复制到每个节点的配置文件目录下 /etc/elasticsearch/
----
cp /usr/share/elasticsearch/elastic-certificates.p12  /etc/elasticsearch/
#更改文件权限
chmod 777 /etc/elasticsearch/elastic-certificates.p12
----

.如果之前配置节点证书时设置了密码，将密码添加到keystore
----
./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password
./bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password
----


.重启ES集群
----
systemctl restart elasticsearch.service
----

.设置内置用户密码(第一个节点设置，其他节点不用)
----
/usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive
----

.创建超级用户赋予权限
----
curl -XPOST -H 'Content-type: application/json' -u elastic:thcl12 'http://192.168.102.11:9200/_xpack/security/user/thcl?pretty' -d '{
  "password" : "superthcl",
  "full_name" : "thcl",
  "roles" : ["admin"],
  "email" : "thcl@thcl.com"
}'

curl -XPOST -H 'Content-type: application/json' -u elastic:thcl12 'http://192.168.102.11:9200/_xpack/security/role/admin?pretty' -d '{
   "run_as": [ "thcl" ],
   "cluster": [ "all" ],
   "indices": [
     {
       "names": [ "*" ],
       "privileges": [ "all" ]
     }
   ]
 }'
----

==== 创建索引时设置分片数和副本数(默认为5，1)
----
curl -u elastic:password -H 'Content-Type: application/json' -XPUT 'http://localhost:9200/movesss' -d'
{
  "settings" : {
    "index" : {
      "number_of_shards" : 5,
      "number_of_replicas" : 1
    }
  }
}
'
----

.查看所有索引
----
curl -u elastic:password 'http://127.0.0.1:9200/_cat/indices?v'
----