=== `Elasticsearch`

==== 基础使用

.测试
`curl 'http://localhost:9200/?pretty'`

.健康检查
[source,bash]
----
[root@elk1 ~]# curl 'localhost:9200/_cluster/health?pretty'
{
  "cluster_name" : "master-node",
  "status" : "green",
  "timed_out" : false,
  "number_of_nodes" : 3,
  "number_of_data_nodes" : 2,
  "active_primary_shards" : 26,
  "active_shards" : 52,
  "relocating_shards" : 0,
  "initializing_shards" : 0,
  "unassigned_shards" : 0,
  "delayed_unassigned_shards" : 0,
  "number_of_pending_tasks" : 0,
  "number_of_in_flight_fetch" : 0,
  "task_max_waiting_in_queue_millis" : 0,
  "active_shards_percent_as_number" : 100.0
}
----

.查看详细信息
`curl 'localhost:9200/_cluster/state?pretty'`

.检索文档是否存在
`curl -i -XHEAD http://localhost:9200/test/test1/123`


.空查询
[source,text]
----
[root@elk1 ~]# curl GET 'localhost:9200/_search?pretty'
curl: (6) Could not resolve host: GET; Unknown error
{
  "took" : 9,           #请求花费的毫秒数
  "timed_out" : false,
  "_shards" : {         #参与查询的分片数（ total 字段），多少成功，多少失败
    "total" : 26,
    "successful" : 26,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : 58145,    # 文档总数
    "max_score" : 1.0,
    "hits" : [
        ...
----

.在所有索引的所有类型中搜索
`curl GET 'localhost:9200/_search`

.在索引 gb 的所有类型中搜索
`curl GET 'localhost:9200/gb/_search`

.在索引 gb 和 us 的所有类型中搜索
`curl GET 'localhost:9200/gb,us/_search`

.在以 g 或 u 开头的索引的所有类型中搜索
`curl GET 'localhost:9200/g*,u*/_search`

.在索引 gb 的类型 user 中搜索
`curl GET 'localhost:9200/gb/user/_search`

.在索引 gb 和 us 的类型为 user 和 tweet 中搜索
`curl GET 'localhost:9200/gb,us/user,tweet/_search`


.分页，每页显示5个结果，页码从1到3
[source,bash]
----

curl GET 'localhost:9200/_search?size=5'
curl GET 'localhost:9200/_search?size=5&from=5'
curl GET 'localhost:9200/_search?size=5&from=10'

----

==== 请求体查询

.字符串查询
[source,bash]
----
curl GET 'localhost:9200/index_2014*/type1,type2/_search
{}'
----

.Post请求
[source,bash]
----
curl POST 'localhost:9200/_search
{
"from": 30,
"size": 10
}'
----


==== 结构化查询

.传递 query 参数进行查询
[source,bash]
----
GET /_search
{
"query": YOUR_QUERY_HERE
}
----

.空查询
[source,bash]
----
GET /_search
{
"query": {
"match_all": {}
}
}
----

.查询子句
[source,bash]
----
GET /_search
{
"query": {
"match": {
"tweet": "elasticsearch"
}
}
}
----

==== 查询与过滤


.term 过滤,主要用于精确匹配哪些值
[source,text]
----
{ "term": { "age": 26 }}
{ "term": { "date": "2014-09-01" }}
{ "term": { "public": true }}
{ "term": { "tag": "full_text" }}

#terms 允许指定多个匹配条件
{
"terms": {
"tag": [ "search", "full_text", "nosql" ]
}
}
----

.range 按照指定范围查找数据
[source,bash]
----
{
"range": {
"age": {
"gte": 20,
"lt": 30
}
}
}
----

.范围操作符包含：
gt :: 大于
gte :: 大于等于
lt :: 小于
lte :: 小于等于

.exists 和 missing
查找文档中是否包含指定字段或没有某个字段
[source,text]
----
{
"exists": {
"field": "title"
}
}
----

.bool 过滤
bool 过滤可以用来合并多个过滤条件查询结果的布尔逻辑，它包含以下操作符：

must :: 多个查询条件的完全匹配,相当于 and 。
must_not :: 多个查询条件的相反匹配，相当于 not 。
should :: 至少有一个查询条件匹配, 相当于 or 。
这些参数可以分别继承一个过滤条件或者一个过滤条件的数组：
[source,bash]
----
{
"bool": {
"must": { "term": { "folder": "inbox" }},
"must_not": { "term": { "tag": "spam" }},
"should": [
{ "term": { "starred": true }},
{ "term": { "unread": true }}
]
}
}
----





